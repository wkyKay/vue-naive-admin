{
  "version": 3,
  "sources": ["../../vue-codemirror/src/config.ts", "../../vue-codemirror/src/codemirror.ts", "../../vue-codemirror/src/events.ts", "../../vue-codemirror/src/props.ts", "../../vue-codemirror/src/component.ts", "../../vue-codemirror/src/index.ts"],
  "sourcesContent": ["import { App, inject } from 'vue'\nimport { basicSetup } from 'codemirror'\nimport { ConfigProps } from './props'\n\nexport const DEFAULT_CONFIG: Readonly<Partial<ConfigProps>> = Object.freeze({\n  autofocus: false,\n  disabled: false,\n  indentWithTab: true,\n  tabSize: 2,\n  placeholder: '',\n  autoDestroy: true,\n  extensions: [basicSetup]\n})\n\nconst CONFIG_SYMBOL = Symbol('vue-codemirror-global-config')\nexport const injectGlobalConfig = (app: App, config?: ConfigProps) => {\n  app.provide(CONFIG_SYMBOL, config)\n}\n\nexport const useGlobalConfig = () => {\n  return inject<ConfigProps>(CONFIG_SYMBOL, {} as ConfigProps)\n}\n", "import type { CSSProperties } from 'vue'\nimport { EditorState, EditorStateConfig, Compartment, Extension, StateEffect } from '@codemirror/state'\nimport { EditorView, EditorViewConfig, ViewUpdate, keymap, placeholder } from '@codemirror/view'\nimport { indentWithTab } from '@codemirror/commands'\nimport { indentUnit } from '@codemirror/language'\n\nexport interface CreateStateOptions extends EditorStateConfig {\n  onChange(doc: string, viewUpdate: ViewUpdate): void\n  onUpdate(viewUpdate: ViewUpdate): void\n  onFocus(viewUpdate: ViewUpdate): void\n  onBlur(viewUpdate: ViewUpdate): void\n}\n\nexport const createEditorState = ({ onUpdate, onChange, onFocus, onBlur, ...config }: CreateStateOptions) => {\n  return EditorState.create({\n    doc: config.doc,\n    selection: config.selection,\n    extensions: [\n      ...(Array.isArray(config.extensions) ? config.extensions : [config.extensions]),\n      EditorView.updateListener.of((viewUpdate) => {\n        // https://discuss.codemirror.net/t/codemirror-6-proper-way-to-listen-for-changes/2395/11\n        onUpdate(viewUpdate)\n        // doc changed\n        if (viewUpdate.docChanged) {\n          onChange(viewUpdate.state.doc.toString(), viewUpdate)\n        }\n        // focus state change\n        if (viewUpdate.focusChanged) {\n          viewUpdate.view.hasFocus ? onFocus(viewUpdate) : onBlur(viewUpdate)\n        }\n      })\n    ]\n  })\n}\n\nexport const createEditorView = (config: EditorViewConfig) => new EditorView({ ...config })\nexport const destroyEditorView = (view: EditorView) => view.destroy()\n\n// https://codemirror.net/examples/config/\n// https://github.com/uiwjs/react-codemirror/blob/22cc81971a/src/useCodeMirror.ts#L144\n// https://gist.github.com/s-cork/e7104bace090702f6acbc3004228f2cb\nexport const createEditorCompartment = (view: EditorView) => {\n  const compartment = new Compartment()\n  const run = (extension: Extension) => {\n    compartment.get(view.state)\n      ? view.dispatch({ effects: compartment.reconfigure(extension) }) // reconfigure\n      : view.dispatch({ effects: StateEffect.appendConfig.of(compartment.of(extension)) }) // inject\n  }\n  return { compartment, run }\n}\n\n// https://codemirror.net/examples/reconfigure/\nexport const createEditorExtensionToggler = (view: EditorView, extension: Extension) => {\n  const { compartment, run } = createEditorCompartment(view)\n  return (targetApply?: boolean) => {\n    const exExtension = compartment.get(view.state)\n    const apply = targetApply ?? exExtension !== extension\n    run(apply ? extension : [])\n  }\n}\n\nexport const getEditorTools = (view: EditorView) => {\n  // doc state\n  const getDoc = () => view.state.doc.toString()\n  const setDoc = (newDoc: string) => {\n    if (newDoc !== getDoc()) {\n      view.dispatch({\n        changes: {\n          from: 0,\n          to: view.state.doc.length,\n          insert: newDoc\n        }\n      })\n    }\n  }\n\n  // UX operations\n  const focus = () => view.focus()\n\n  // reconfigure extension\n  const { run: reExtensions } = createEditorCompartment(view)\n\n  // disabled editor\n  const toggleDisabled = createEditorExtensionToggler(view, [\n    EditorView.editable.of(false),\n    EditorState.readOnly.of(true)\n  ])\n\n  // https://codemirror.net/examples/tab/\n  const toggleIndentWithTab = createEditorExtensionToggler(view, keymap.of([indentWithTab]))\n\n  // tab size\n  // https://gist.github.com/s-cork/e7104bace090702f6acbc3004228f2cb\n  const { run: reTabSize } = createEditorCompartment(view)\n  const setTabSize = (tabSize: number) => {\n    reTabSize([EditorState.tabSize.of(tabSize), indentUnit.of(' '.repeat(tabSize))])\n  }\n\n  // phrases\n  // https://codemirror.net/examples/translate/\n  const { run: rePhrases } = createEditorCompartment(view)\n  const setPhrases = (phrases: Record<string, string>) => {\n    rePhrases([EditorState.phrases.of(phrases)])\n  }\n\n  // set editor's placeholder\n  const { run: rePlaceholder } = createEditorCompartment(view)\n  const setPlaceholder = (value: string) => {\n    rePlaceholder(placeholder(value))\n  }\n\n  // set style to editor element\n  // https://codemirror.net/examples/styling/\n  const { run: reStyle } = createEditorCompartment(view)\n  const setStyle = (style: CSSProperties = {}) => {\n    reStyle(EditorView.theme({ '&': { ...(style as any) } }))\n  }\n\n  return {\n    focus,\n    getDoc,\n    setDoc,\n    reExtensions,\n    toggleDisabled,\n    toggleIndentWithTab,\n    setTabSize,\n    setPhrases,\n    setPlaceholder,\n    setStyle\n  }\n}\n", "import { EditorState } from '@codemirror/state'\nimport { EditorView, ViewUpdate } from '@codemirror/view'\n\nexport enum EventKey {\n  Change = 'change',\n  Update = 'update',\n  Focus = 'focus',\n  Blur = 'blur',\n  Ready = 'ready',\n  ModelUpdate = 'update:modelValue'\n}\n\nexport const editorEvents = {\n  // when content(doc) change only\n  [EventKey.Change]: (value: string, viewUpdate: ViewUpdate) => true,\n  // when codemirror state change\n  [EventKey.Update]: (viewUpdate: ViewUpdate) => true,\n  [EventKey.Focus]: (viewUpdate: ViewUpdate) => true,\n  [EventKey.Blur]: (viewUpdate: ViewUpdate) => true,\n  // when component mounted\n  [EventKey.Ready]: (payload: { view: EditorView; state: EditorState; container: HTMLDivElement }) => true\n}\n\nexport const modelUpdateEvent = {\n  [EventKey.ModelUpdate]: editorEvents[EventKey.Change]\n}\n\nexport const events = {\n  ...editorEvents,\n  ...modelUpdateEvent\n}\n\nexport type EditorEvents = typeof editorEvents\nexport type Events = typeof events\n", "import type { CSSProperties } from 'vue'\nimport { PropType, ExtractPropTypes } from 'vue'\nimport { EditorStateConfig } from '@codemirror/state'\n\nconst UNDEFINED = void 0\nconst NonDefaultBooleanType = {\n  type: Boolean,\n  default: UNDEFINED\n}\n\nexport const configProps = {\n  autofocus: NonDefaultBooleanType,\n  disabled: NonDefaultBooleanType,\n  indentWithTab: NonDefaultBooleanType,\n  tabSize: Number,\n  placeholder: String,\n  style: Object as PropType<CSSProperties>,\n  autoDestroy: NonDefaultBooleanType,\n  phrases: Object as PropType<Record<string, string>>,\n  // codemirror options\n  root: Object as PropType<ShadowRoot | Document>,\n  extensions: Array as PropType<EditorStateConfig['extensions']>,\n  selection: Object as PropType<EditorStateConfig['selection']>\n}\n\nexport const modelValueProp = {\n  modelValue: {\n    type: String,\n    default: ''\n  }\n}\n\nexport const props = {\n  ...configProps,\n  ...modelValueProp\n}\n\nexport type ConfigProps = ExtractPropTypes<typeof configProps>\nexport type Props = ExtractPropTypes<typeof props>\nexport type PropKey = keyof Props\n", "import { defineComponent, shallowRef, computed, watch, toRaw, onMounted, onBeforeUnmount, h } from 'vue'\nimport { EditorState } from '@codemirror/state'\nimport { EditorView } from '@codemirror/view'\nimport { createEditorState, createEditorView, destroyEditorView, getEditorTools } from './codemirror'\nimport { useGlobalConfig, DEFAULT_CONFIG } from './config'\nimport { props, ConfigProps } from './props'\nimport { events, EventKey } from './events'\n\nexport default defineComponent({\n  name: 'VueCodemirror',\n  props: { ...props },\n  emits: { ...events },\n  setup(props, context) {\n    const container = shallowRef<HTMLDivElement>()\n    const state = shallowRef<EditorState>()\n    const view = shallowRef<EditorView>()\n\n    const defaultConfig: ConfigProps = {\n      ...DEFAULT_CONFIG,\n      ...useGlobalConfig()\n    }\n\n    const config = computed<ConfigProps>(() => {\n      const result = {} as Required<ConfigProps>\n      Object.keys(toRaw(props)).forEach((key: any) => {\n        if (key !== 'modelValue') {\n          // @ts-ignore\n          // MARK: ensure access to `prop[key]` original object\n          result[key] = props[key] ?? defaultConfig[key]\n        }\n      })\n      return result\n    })\n\n    onMounted(() => {\n      state.value = createEditorState({\n        doc: props.modelValue,\n        selection: config.value.selection,\n        // The extensions are split into two parts, global and component prop.\n        // Only the global part is initialized here.\n        // The prop part is dynamically reconfigured after the component is mounted.\n        extensions: defaultConfig.extensions ?? [],\n        onFocus: (viewUpdate) => context.emit(EventKey.Focus, viewUpdate),\n        onBlur: (viewUpdate) => context.emit(EventKey.Blur, viewUpdate),\n        onUpdate: (viewUpdate) => context.emit(EventKey.Update, viewUpdate),\n        onChange: (newDoc, viewUpdate) => {\n          if (newDoc !== props.modelValue) {\n            context.emit(EventKey.Change, newDoc, viewUpdate)\n            context.emit(EventKey.ModelUpdate, newDoc, viewUpdate)\n          }\n        }\n      })\n\n      view.value = createEditorView({\n        state: state.value,\n        parent: container.value!,\n        root: config.value.root\n      })\n\n      const editorTools = getEditorTools(view.value)\n\n      // watch prop.modelValue\n      watch(\n        () => props.modelValue,\n        (newValue) => {\n          if (newValue !== editorTools.getDoc()) {\n            editorTools.setDoc(newValue)\n          }\n        }\n      )\n\n      // watch prop.extensions\n      watch(\n        () => props.extensions,\n        (extensions) => editorTools.reExtensions(extensions || []),\n        { immediate: true }\n      )\n\n      // watch prop.disabled\n      watch(\n        () => config.value.disabled,\n        (disabled) => editorTools.toggleDisabled(disabled),\n        { immediate: true }\n      )\n\n      // watch prop.indentWithTab\n      watch(\n        () => config.value.indentWithTab,\n        (iwt) => editorTools.toggleIndentWithTab(iwt),\n        { immediate: true }\n      )\n\n      // watch prop.tabSize\n      watch(\n        () => config.value.tabSize,\n        (tabSize) => editorTools.setTabSize(tabSize!),\n        { immediate: true }\n      )\n\n      // watch prop.phrases\n      watch(\n        () => config.value.phrases,\n        (phrases) => editorTools.setPhrases(phrases || {}),\n        { immediate: true }\n      )\n\n      // watch prop.placeholder\n      watch(\n        () => config.value.placeholder,\n        (placeholder) => editorTools.setPlaceholder(placeholder!),\n        { immediate: true }\n      )\n\n      // watch prop.style\n      watch(\n        () => config.value.style,\n        (style) => editorTools.setStyle(style),\n        { immediate: true }\n      )\n\n      // immediate autofocus\n      if (config.value.autofocus) {\n        editorTools.focus()\n      }\n\n      context.emit(EventKey.Ready, {\n        state: state.value!,\n        view: view.value!,\n        container: container.value!\n      })\n    })\n\n    onBeforeUnmount(() => {\n      if (config.value.autoDestroy && view.value) {\n        destroyEditorView(view.value)\n      }\n    })\n\n    return () => {\n      return h('div', {\n        class: 'v-codemirror',\n        style: { display: 'contents' },\n        ref: container\n      })\n    }\n  }\n})\n", "import type { Plugin } from 'vue'\nimport type { Props } from './props'\nimport { injectGlobalConfig } from './config'\nimport Component from './component'\n\nexport type { Props } from './props'\nexport type { Events } from './events'\nexport { DEFAULT_CONFIG } from './config'\n\nexport const Codemirror = Component\nexport const install: Plugin = (app, defaultConfig?: Props) => {\n  app.component(Component.name, Component)\n  app.component('Codemirror', Component)\n  injectGlobalConfig(app, defaultConfig)\n}\n\nexport default {\n  Codemirror,\n  install\n}\n"],
  "mappings": "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",
  "names": ["DEFAULT_CONFIG", "Object", "freeze", "autofocus", "disabled", "indentWithTab", "tabSize", "placeholder", "autoDestroy", "extensions", "basicSetup", "CONFIG_SYMBOL", "Symbol", "const", "EventKey", "createEditorState", "_a", "onUpdate", "onChange", "onFocus", "onBlur", "config", "EditorState", "create", "doc", "selection", "Array", "isArray", "concat", "EditorView", "updateListener", "of", "viewUpdate", "docChanged", "state", "toString", "focusChanged", "view", "hasFocus", "createEditorCompartment", "compartment", "Compartment", "run", "extension", "get", "dispatch", "effects", "reconfigure", "StateEffect", "appendConfig", "createEditorExtensionToggler", "ref", "targetApply", "exExtension", "NonDefaultBooleanType", "type", "Boolean", "default", "configProps", "Number", "String", "style", "phrases", "root", "modelValueProp", "modelValue", "props", "assign", "editorEvents", "Change", "value", "Update", "Focus", "Blur", "Ready", "payload", "modelUpdateEvent", "ModelUpdate", "events", "Component", "defineComponent", "name", "emits", "setup", "context", "container", "shallowRef", "defaultConfig", "inject", "computed", "result", "keys", "toRaw", "forEach", "key", "onMounted", "emit", "newDoc", "parent", "editorTools", "getDoc", "reExtensions", "toggleDisabled", "editable", "readOnly", "toggleIndentWithTab", "keymap", "reTabSize", "rePhrases", "rePlaceholder", "reStyle", "focus", "changes", "from", "to", "length", "insert", "indentUnit", "repeat", "theme", "watch", "newValue", "setDoc", "immediate", "iwt", "setTabSize", "setPhrases", "setPlaceholder", "setStyle", "onBeforeUnmount", "destroy", "h", "class", "display", "Codemirror", "install", "app", "component", "provide", "index"]
}
